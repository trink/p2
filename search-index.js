var N = null;var searchIndex = {};
searchIndex["p2"]={"doc":"P2 algorithms for quantiles and histograms.","items":[[3,"Histogram","p2","P2 Histogram Data Structure",N,N],[3,"Quantile","","P2 Quantile Data Structure",N,N],[11,"clone","","",0,[[["self"]],["histogram"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clear","","Resets the histogram back to its initial state.",0,[[["self"]],["self"]]],[11,"new","","Constructor taking the number of buckets to allocate in the histogram ( 3 < buckets < u16::MAX - 1).",0,[[["u16"]],["simpleresult",["histogram"]]]],[11,"add","","Adds a value to a histogram, NAN is ignored.",0,[[["self"],["f64"]]]],[11,"estimate","","Returns the estimated quantile value for the specified marker. * 1 = min * bucket + 1 = max",0,[[["self"],["usize"]],["f64"]]],[11,"count","","Returns the number of observations that are less than or equal to the marker (see estimate).",0,[[["self"],["usize"]],["usize"]]],[11,"clone","","",1,[[["self"]],["quantile"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clear","","Resets the quantile back to its initial state.",1,[[["self"]],["self"]]],[11,"new","","Constructor taking the p_quantile to calculate (e.g. 0.5 == median)",1,[[["f32"]],["simpleresult",["quantile"]]]],[11,"add","","Adds a value to a histogram, NAN is ignored.",1,[[["self"],["f64"]],["f64"]]],[11,"estimate","","Returns the estimated quantile value for the specified marker. * 1 = min * 2 = p/2 * 3 = p * 4 = (1+p)/2 * 5 = max",1,[[["self"],["usize"]],["f64"]]],[11,"count","","Returns the number of observations that are less than or equal to the marker (see estimate).",1,[[["self"],["usize"]],["usize"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]]],"paths":[[3,"Histogram"],[3,"Quantile"]]};
searchIndex["simple_error"]={"doc":"A simple error type backed by a string.","items":[[3,"SimpleError","simple_error","A type that represents a simple error.",N,N],[6,"SimpleResult","","Result type in which the error is a simple error",N,N],[11,"clone","","",0,[[["self"]],["simpleerror"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["simpleerror"]],["bool"]]],[11,"ne","","",0,[[["self"],["simpleerror"]],["bool"]]],[11,"new","","Creates a new simple error.",0,[[["t"]],["simpleerror"]]],[11,"from","","Creates a new simple error from another error.",0,[[["t"]],["simpleerror"]]],[11,"with","","Creates a new simple error from a string with another error.",0,[[["str"],["t"]],["simpleerror"]]],[11,"as_str","","Extracts a string slice describing the error.",0,[[["self"]],["str"]]],[11,"from","","",0,[[["str"]],["simpleerror"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[14,"try_with","","Helper macro for unwrapping `Result` values while returning early with a newly constructed `SimpleError` if the value of the expression is `Err`. Can only be used in functions that return `Result<_, SimpleError>`.",N,N],[14,"require_with","","Helper macro for unwrapping `Option` values while returning early with a newly constructed `SimpleError` if the value of the expression is `None`. Can only be used in functions that return `Result<_, SimpleError>`.",N,N],[14,"bail","","Helper macro for returning a `SimpleError` constructed from either a `Into<SimpleError>`, a string slice, or a formatted string.",N,N],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[3,"SimpleError"]]};
initSearch(searchIndex);
